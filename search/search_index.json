{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"blackbody","text":""},{"location":"#api","title":"API","text":"<p>See here.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#blackbody.integrated_photon_sterance","title":"<code>integrated_photon_sterance(T, x_ab, *, spectral_unit, area_unit)</code>","text":"<p>Integrated photon sterance</p> <p>Parameters:</p> Name Type Description Default <code>T</code> <code>ArrayLike</code> <p>blackbody temperature (K)</p> required <code>x_ab</code> <code>ArrayLike</code> <p>spectral interval in units of <code>spectral_unit</code></p> required <code>spectral_unit</code> <code>str</code> <p>units of the spectral variable</p> required <code>area_unit</code> <code>str</code> <p>units of the area element</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>integrated photon sterance</p> Source code in <code>src/blackbody/__init__.py</code> <pre><code>@check_arguments_integrated\ndef integrated_photon_sterance(T, x_ab, *, spectral_unit, area_unit):\n\"\"\"\n    Integrated photon sterance\n\n    Arguments:\n        T: blackbody temperature (K)\n        x_ab: spectral interval in units of `spectral_unit`\n        spectral_unit: units of the spectral variable\n        area_unit: units of the area element\n\n    Returns:\n        integrated photon sterance\n    \"\"\"\n    (c1, c2) = RADIATION_CONSTANTS[('photon', spectral_unit)]\n\n    _integrated_planck_distribution = INTEGRATED_PLANCK_DISTRIBUTIONS[('photon', spectral_unit)]\n\n    i1 = _integrated_planck_distribution(c1, c2, T, x_ab[..., 0])\n    i2 = _integrated_planck_distribution(c1, c2, T, x_ab[..., 1])\n\n    return np.abs(i2-i1)*AREA_FACTORS[area_unit]\n</code></pre>"},{"location":"api/#blackbody.integrated_radiant_sterance","title":"<code>integrated_radiant_sterance(T, x_ab, *, spectral_unit, area_unit)</code>","text":"<p>Integrated radiant sterance</p> <p>Parameters:</p> Name Type Description Default <code>T</code> <code>ArrayLike</code> <p>blackbody temperature (K)</p> required <code>x_ab</code> <code>ArrayLike</code> <p>spectral interval in units of <code>spectral_unit</code></p> required <code>spectral_unit</code> <code>str</code> <p>units of the spectral variable</p> required <code>area_unit</code> <code>str</code> <p>units of the area element</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>integrated radiant sterance</p> Source code in <code>src/blackbody/__init__.py</code> <pre><code>@check_arguments_integrated\ndef integrated_radiant_sterance(T, x_ab, *, spectral_unit, area_unit):\n\"\"\"\n    Integrated radiant sterance\n\n    Arguments:\n        T: blackbody temperature (K)\n        x_ab: spectral interval in units of `spectral_unit`\n        spectral_unit: units of the spectral variable\n        area_unit: units of the area element\n\n    Returns:\n        integrated radiant sterance\n    \"\"\"\n    (c1, c2) = RADIATION_CONSTANTS[('energy', spectral_unit)]\n\n    _integrated_planck_distribution = INTEGRATED_PLANCK_DISTRIBUTIONS[('energy', spectral_unit)]\n\n    i1 = _integrated_planck_distribution(c1, c2, T, x_ab[..., 0])\n    i2 = _integrated_planck_distribution(c1, c2, T, x_ab[..., 1])\n\n    return np.abs(i2-i1)*AREA_FACTORS[area_unit]\n</code></pre>"},{"location":"api/#blackbody.spectral_photon_sterance","title":"<code>spectral_photon_sterance(T, x, *, spectral_unit, area_unit)</code>","text":"<p>Spectral photon sterance</p> <p>Parameters:</p> Name Type Description Default <code>T</code> <code>ArrayLike</code> <p>blackbody temperature (K)</p> required <code>x</code> <code>ArrayLike</code> <p>spectral variable in units of <code>spectral_unit</code></p> required <code>spectral_unit</code> <code>str</code> <p>units of the spectral variable</p> required <code>area_unit</code> <code>str</code> <p>units of the area element</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>spectral photon sterance</p> Source code in <code>src/blackbody/__init__.py</code> <pre><code>@check_arguments_spectral\ndef spectral_photon_sterance(T, x, *, spectral_unit, area_unit):\n\"\"\"\n    Spectral photon sterance\n\n    Arguments:\n        T: blackbody temperature (K)\n        x: spectral variable in units of `spectral_unit`\n        spectral_unit: units of the spectral variable\n        area_unit: units of the area element\n\n    Returns:\n        spectral photon sterance\n\n    \"\"\"\n    (c1, c2) = RADIATION_CONSTANTS[('photon', spectral_unit)]\n\n    _planck_distribution = PLANCK_DISTRIBUTIONS[('photon', spectral_unit)]\n\n    return _planck_distribution(c1, c2, T, x)*AREA_FACTORS[area_unit]\n</code></pre>"},{"location":"api/#blackbody.spectral_radiant_sterance","title":"<code>spectral_radiant_sterance(T, x, *, spectral_unit, area_unit)</code>","text":"<p>Spectral radiant sterance</p> <p>Parameters:</p> Name Type Description Default <code>T</code> <code>ArrayLike</code> <p>blackbody temperature (K)</p> required <code>x</code> <code>ArrayLike</code> <p>spectral variable in units of <code>spectral_unit</code></p> required <code>spectral_unit</code> <code>str</code> <p>units of the spectral variable</p> required <code>area_unit</code> <code>str</code> <p>units of the area element</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>spectral radiant sterance</p> Source code in <code>src/blackbody/__init__.py</code> <pre><code>@check_arguments_spectral\ndef spectral_radiant_sterance(T, x, *, spectral_unit, area_unit):\n\"\"\"\n    Spectral radiant sterance\n\n    Arguments:\n        T: blackbody temperature (K)\n        x: spectral variable in units of `spectral_unit`\n        spectral_unit: units of the spectral variable\n        area_unit: units of the area element\n\n    Returns:\n        spectral radiant sterance\n    \"\"\"\n    (c1, c2) = RADIATION_CONSTANTS[('energy', spectral_unit)]\n\n    _planck_distribution = PLANCK_DISTRIBUTIONS[('energy', spectral_unit)]\n\n    return _planck_distribution(c1, c2, T, x)*AREA_FACTORS[area_unit]\n</code></pre>"}]}